{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"#contract.Sales--class-sales","title":"Class Sales","text":""},{"location":"#contract.Sales--representa-uma-venda-realizada","title":"Representa uma venda realizada.","text":"<p>Parameters:</p> Name Type Description Default <code>email</code> <code>EmailStr</code> <p>O e-mail do venderdor. Deve ser um endere\u00e7o de e-mail v\u00e1lido.</p> required <code>date</code> <code>datetime</code> <p>A data e hora em que a venda foi realizada.</p> required <code>price</code> <code>PositiveFloat</code> <p>O pre\u00e7o do produto vendido. Deve ser um valor positivo.</p> required <code>quantity</code> <code>PositiveInt</code> <p>A quantidade do produto vendida. Deve ser um inteiro positivo.</p> required <code>product</code> <code>ProductEnum</code> <p>O produto vendido, representado por um enum.</p> required Exce\u00e7\u00f5es <p>Todos os campos s\u00e3o obrigat\u00f3rios e devem atender aos tipos especificados.</p> Source code in <code>contract.py</code> <pre><code>class Sales(BaseModel):\n    \"\"\"\n    # Class Sales\n    ## Representa uma venda realizada.\n\n    Args:\n        email (EmailStr): O e-mail do venderdor. Deve ser um endere\u00e7o de e-mail v\u00e1lido.\n        date (datetime): A data e hora em que a venda foi realizada.\n        price (PositiveFloat): O pre\u00e7o do produto vendido. Deve ser um valor positivo.\n        quantity (PositiveInt): A quantidade do produto vendida. Deve ser um inteiro positivo.\n        product (ProductEnum): O produto vendido, representado por um enum.\n\n    Exce\u00e7\u00f5es:\n        Todos os campos s\u00e3o obrigat\u00f3rios e devem atender aos tipos especificados.\n    \"\"\"\n    email: EmailStr\n    date: datetime\n    price: PositiveFloat\n    quantity: PositiveInt\n    product: ProductEnum\n</code></pre>"},{"location":"#database.save_sale--save_sale","title":"save_sale","text":""},{"location":"#database.save_sale--salva-uma-venda-no-banco-de-dados","title":"Salva uma venda no banco de dados.","text":"<p>Parameters:</p> Name Type Description Default <code>sale</code> <code>Sales</code> <p>A inst\u00e2ncia da classe Sales a ser salva. Todos os campos devem ser preenchidos            corretamente de acordo com as restri\u00e7\u00f5es definidas na classe Sales.</p> required <p>Raises:</p> Type Description <code>DatabaseError</code> <p>Se ocorrer um erro ao tentar salvar a venda no banco de dados.</p> <code>ValidationError</code> <p>Se a venda n\u00e3o atender \u00e0s regras de valida\u00e7\u00e3o definidas.</p> <p>Examples:</p> <pre><code>sale = Sales(email=\"exemplo@dominio.com\", date=datetime.now(), price=29.99, quantity=1, product=ProductEnum.PRODUTO_A)\nsave_sale(sale)\n</code></pre> Source code in <code>database.py</code> <pre><code>def save_sale(sale: Sales):\n    \"\"\"\n    # save_sale \n    ## Salva uma venda no banco de dados.\n\n    Args:\n        sale (Sales): A inst\u00e2ncia da classe Sales a ser salva. Todos os campos devem ser preenchidos\n                       corretamente de acordo com as restri\u00e7\u00f5es definidas na classe Sales.\n\n    Raises:\n        DatabaseError: Se ocorrer um erro ao tentar salvar a venda no banco de dados.\n        ValidationError: Se a venda n\u00e3o atender \u00e0s regras de valida\u00e7\u00e3o definidas.\n\n    Examples:\n        ```python\n        sale = Sales(email=\"exemplo@dominio.com\", date=datetime.now(), price=29.99, quantity=1, product=ProductEnum.PRODUTO_A)\n        save_sale(sale)\n        ```\n    \"\"\"\n    try:\n        conn = psycopg2.connect(\n            host=DB_HOST,\n            database=DB_NAME,\n            user=DB_USER,\n            password=DB_PASS\n        )\n        cursor = conn.cursor()\n\n        # Inser\u00e7\u00e3o dos dados na tabela de vendas\n        insert_query = sql.SQL(\n            \"INSERT INTO sales (email, date, price, quantity, product) VALUES (%s, %s, %s, %s, %s)\"\n        )\n        cursor.execute(insert_query, (\n            sale.email,\n            sale.date,\n            sale.price,\n            sale.quantity,\n            sale.product.value\n        ))\n        conn.commit()\n        cursor.close()\n        conn.close()\n        st.success(\"Venda salvos com sucesso no banco de dados!\")\n    except Exception as e:\n        st.error(f\"Erro ao salvar no banco de dados: {e}\")\n</code></pre>"},{"location":"requisitos/","title":"Requisitos","text":""},{"location":"requisitos/#documento-de-requisitos-com-validacoes-sistema-de-crm","title":"Documento de Requisitos com Valida\u00e7\u00f5es - Sistema de CRM","text":""},{"location":"requisitos/#objetivo","title":"Objetivo","text":"<p>O objetivo deste documento \u00e9 definir os requisitos funcionais e as valida\u00e7\u00f5es necess\u00e1rias para o desenvolvimento do frontend do Sistema de CRM, desenvolvido com Streamlit. O sistema visa capturar informa\u00e7\u00f5es sobre vendas realizadas, valid\u00e1-las e exibi-las na tela.</p> <pre><code>graph TD\n    A[Usu\u00e1rio Digita no Frontend] --&gt; B{Valida\u00e7\u00e3o do Contrato de Dados}\n\n    B -- Dados V\u00e1lidos --&gt; C[Salva no Banco de Dados]\n    B -- Dados Inv\u00e1lidos --&gt; D[Erro de Valida\u00e7\u00e3o Exibido]\n\n    A --&gt; |Entrada de Dados| B\n    B --&gt; |Valida\u00e7\u00e3o pelo Pydantic| C\n    B --&gt; |Falha na Valida\u00e7\u00e3o| D\n    C --&gt; E[Dados Salvos com Sucesso]\n    D --&gt; F[Mostrar Mensagem de Erro no Frontend]\n</code></pre>"},{"location":"requisitos/#descricao-do-diagrama","title":"Descri\u00e7\u00e3o do Diagrama:","text":"<ol> <li> <p>Usu\u00e1rio Digita no Frontend:</p> </li> <li> <p>O usu\u00e1rio insere os dados necess\u00e1rios no frontend do sistema.</p> </li> <li> <p>Valida\u00e7\u00e3o do Contrato de Dados:</p> </li> <li> <p>Os dados inseridos s\u00e3o validados usando o modelo Pydantic (contrato de dados) para garantir que estejam no formato correto e dentro das regras especificadas.</p> </li> <li> <p>Dados V\u00e1lidos:</p> </li> <li> <p>Se os dados forem v\u00e1lidos, eles s\u00e3o enviados para o banco de dados e salvos.</p> </li> <li> <p>Dados Inv\u00e1lidos:</p> </li> <li> <p>Se os dados n\u00e3o atenderem aos crit\u00e9rios de valida\u00e7\u00e3o, uma mensagem de erro \u00e9 gerada e exibida no frontend.</p> </li> <li> <p>Salvar no Banco de Dados:</p> </li> <li> <p>Ap\u00f3s a valida\u00e7\u00e3o, os dados s\u00e3o persistidos no banco de dados.</p> </li> <li> <p>Exibi\u00e7\u00e3o de Mensagens:</p> </li> <li>Exibe uma mensagem de sucesso quando os dados s\u00e3o salvos corretamente, ou uma mensagem de erro quando h\u00e1 falhas na valida\u00e7\u00e3o.</li> </ol> <p>Esse diagrama mostra o fluxo completo desde a entrada at\u00e9 o salvamento dos dados, detalhando o processo de valida\u00e7\u00e3o essencial para manter a integridade do sistema.</p>"},{"location":"requisitos/#requisitos-funcionais-e-validacoes","title":"Requisitos Funcionais e Valida\u00e7\u00f5es","text":"<ol> <li> <p>T\u00edtulo do Sistema</p> </li> <li> <p>Descri\u00e7\u00e3o: O sistema deve exibir o t\u00edtulo \"Sistema de CRM\" no topo da p\u00e1gina.</p> </li> <li> <p>Justificativa: Identificar claramente o sistema e sua finalidade para o usu\u00e1rio.</p> </li> <li> <p>Campos de Entrada de Dados</p> </li> <li> <p>O sistema deve fornecer campos para inser\u00e7\u00e3o de dados da venda. Cada campo deve ser claramente identificado e deve aceitar o tipo de entrada correto conforme descrito abaixo, com as respectivas valida\u00e7\u00f5es.</p> </li> </ol> <p>##### Detalhamento dos Campos e Valida\u00e7\u00f5es</p> <ol> <li> <p>Email do Vendedor</p> <ul> <li>Descri\u00e7\u00e3o: Campo de texto para inser\u00e7\u00e3o do email do vendedor.</li> <li>Tipo de Entrada: <code>text_input</code> (String)</li> <li>Valida\u00e7\u00e3o Esperada:<ul> <li>Deve ser um email v\u00e1lido no formato padr\u00e3o (ex: <code>vendedor@exemplo.com</code>).</li> <li>Verificar se o campo n\u00e3o est\u00e1 vazio.</li> </ul> </li> <li>Exemplo de Uso: O usu\u00e1rio insere um email v\u00e1lido, como <code>vendedor@exemplo.com</code>.</li> </ul> </li> <li> <p>Data da Compra</p> <ul> <li>Descri\u00e7\u00e3o: Campo para selecionar a data em que a venda foi realizada.</li> <li>Tipo de Entrada: <code>date_input</code> (Data)</li> <li>Valor Padr\u00e3o: A data atual (<code>datetime.now()</code>).</li> <li>Valida\u00e7\u00e3o Esperada:<ul> <li>A data deve estar dentro do intervalo permitido: entre <code>01/09/2024</code> e <code>12/09/2024</code>.</li> <li>N\u00e3o permitir datas fora do intervalo especificado.</li> </ul> </li> <li>Exemplo de Uso: O usu\u00e1rio seleciona uma data como <code>05/09/2024</code>.</li> </ul> </li> <li> <p>Hora da Compra</p> <ul> <li>Descri\u00e7\u00e3o: Campo para selecionar a hora em que a venda foi realizada.</li> <li>Tipo de Entrada: <code>time_input</code> (Hora)</li> <li>Valor Padr\u00e3o: 09:00 (hora inicial padr\u00e3o).</li> <li>Valida\u00e7\u00e3o Esperada:<ul> <li>A hora deve ser inserida dentro do intervalo de 09:00 \u00e0s 17:00.</li> </ul> </li> <li>Exemplo de Uso: O usu\u00e1rio seleciona <code>10:30</code>.</li> </ul> </li> <li> <p>Valor da Venda</p> <ul> <li>Descri\u00e7\u00e3o: Campo num\u00e9rico para inserir o valor monet\u00e1rio da venda realizada.</li> <li>Tipo de Entrada: <code>number_input</code> (Float)</li> <li>Valor M\u00ednimo: 0.0 (n\u00e3o s\u00e3o permitidos valores negativos).</li> <li>Formato: Decimal com duas casas (<code>format=\"%.2f\"</code>).</li> <li>Valida\u00e7\u00e3o Esperada:<ul> <li>Deve ser um n\u00famero positivo maior que zero.</li> <li>Deve estar no formato monet\u00e1rio adequado com duas casas decimais.</li> </ul> </li> <li>Exemplo de Uso: O usu\u00e1rio insere <code>1500.00</code>.</li> </ul> </li> <li> <p>Quantidade de Produtos</p> <ul> <li>Descri\u00e7\u00e3o: Campo num\u00e9rico para inserir a quantidade de produtos vendidos.</li> <li>Tipo de Entrada: <code>number_input</code> (Inteiro)</li> <li>Valor M\u00ednimo: 1 (quantidade m\u00ednima permitida).</li> <li>Passo: Incremento de 1 unidade por ajuste.</li> <li>Valida\u00e7\u00e3o Esperada:<ul> <li>Deve ser um n\u00famero inteiro positivo.</li> <li>N\u00e3o deve ser zero ou negativo.</li> </ul> </li> <li>Exemplo de Uso: O usu\u00e1rio insere <code>3</code>.</li> </ul> </li> <li> <p>Produto</p> <ul> <li>Descri\u00e7\u00e3o: Campo de sele\u00e7\u00e3o para escolher o produto vendido.</li> <li>Tipo de Entrada: <code>selectbox</code> (Sele\u00e7\u00e3o)</li> <li>Op\u00e7\u00f5es Dispon\u00edveis:<ul> <li>\"Smartphone\"</li> <li>\"Laptop\"</li> <li>\"Fones de Ouvido\"</li> </ul> </li> <li>Valida\u00e7\u00e3o Esperada:<ul> <li>O produto selecionado deve ser uma das op\u00e7\u00f5es v\u00e1lidas.</li> <li>N\u00e3o permitir sele\u00e7\u00e3o de produtos fora das op\u00e7\u00f5es listadas.</li> </ul> </li> <li>Exemplo de Uso: O usu\u00e1rio seleciona \"Laptop\".</li> </ul> </li> <li> <p>Bot\u00e3o de Submiss\u00e3o</p> </li> <li> <p>Descri\u00e7\u00e3o: Um bot\u00e3o para salvar e exibir os dados inseridos na tela.</p> </li> <li>R\u00f3tulo do Bot\u00e3o: \"Salvar\"</li> <li> <p>Comportamento: Quando clicado, o sistema deve capturar os dados inseridos nos campos, validar as entradas e exibi-las na tela se todos os campos estiverem corretos.</p> </li> <li> <p>Exibi\u00e7\u00e3o dos Dados</p> </li> <li>Descri\u00e7\u00e3o: Ap\u00f3s a submiss\u00e3o, o sistema deve exibir os dados capturados na tela.</li> <li>Formatos de Exibi\u00e7\u00e3o:<ul> <li>Email do Vendedor: Exibe o email inserido.</li> <li>Data e Hora da Compra: Exibe a data e hora combinadas como <code>yyyy-mm-dd hh:mm:ss</code>.</li> <li>Valor da Venda: Exibe o valor formatado como moeda, ex.: <code>R$ 1500.00</code>.</li> <li>Quantidade de Produtos: Exibe a quantidade inserida.</li> <li>Produto: Exibe o nome do produto selecionado.</li> </ul> </li> </ol>"},{"location":"requisitos/#notas","title":"Notas","text":"<ul> <li>Este sistema captura e valida os dados antes de exibi-los, garantindo que todas as entradas estejam corretas conforme as regras definidas.</li> <li>Em vers\u00f5es futuras, o sistema poder\u00e1 ser integrado com um backend para persist\u00eancia dos dados e funcionalidades avan\u00e7adas de an\u00e1lise e relat\u00f3rios.</li> </ul>"},{"location":"requisitos/#objetivo-futuro","title":"Objetivo Futuro","text":"<ul> <li>Integrar valida\u00e7\u00f5es avan\u00e7adas para refor\u00e7ar a integridade dos dados.</li> <li>Conectar o sistema a um banco de dados para armazenar vendas e gerar relat\u00f3rios.</li> <li>Adicionar verifica\u00e7\u00f5es adicionais para campos obrigat\u00f3rios e dados duplicados.</li> </ul>"}]}